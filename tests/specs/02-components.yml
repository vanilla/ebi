overview: Basic tests for template language features.
tests:
  - name: x-component
    template: >
      <div x-component="foo">Hello {name}!</div><foo name="{foo}" />
    expected: <div>Hello Bar!</div>
    data: {foo: 'Bar', name: 'Baz', child: {name: 'Frank'}}
    tests:
      - name: default x-with
        template: <div x-component="foo">Hello {name}!</div><foo />
        expected: <div>Hello Baz!</div>
      - name: x-with
        template: <div x-component="foo">Hello {name}!</div><foo x-with="child" />
        expected: <div>Hello Frank!</div>
      - name: overridden x-with
        template: >
          <div x-component="foo">Hello {name}{punc ?: "!"}</div><foo x-with="child" punc="?" />
        expected: <div>Hello Frank?</div>
      - name: x-include
        template: >
          <div x-component="bar">Hello {name}!</div><x x-include="foo" name="{foo}" />
  - name: x-children
    template: >
      <div x-component="page"><h1 x-children/></div><page>Hello {name}!</page>
    data: {name: 'Sam'}
    expected: <div><h1>Hello Sam!</h1></div>
    tests:
      - name: named child
        template: >
          <page><x x-block="greet">Hello {name}!</x></page><div x-component="page"><h1 x-children="greet" /></div>
  - name: x-children nested
    data: [{name: 'Frank'}, {name: 'Joe'}]
    template: >-
      <li x-component="row" id="{id}"><x x-children /></li><ul x-each="this" x-as="i j"><row id="{i}">{j.name}</row></ul>
    expected: >-
      <ul><li id="0">Frank</li><li id="1">Joe</li></ul>
  - name: unicode
    data: []
    template: >-
      <span x-component="flyout-arrow" class="flyout-arrow">▾</span><flyout-arrow />
    expected: >-
      <span class="flyout-arrow">▾</span>

